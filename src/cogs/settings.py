# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import discord
from discord.ext import commands
import json
from typing import Any, Dict
import logging

from ..utils.permissions import requires_permission
from ..utils.logger import get_logger

logger = get_logger(__name__)


class SettingsCog(commands.Cog, name="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
    """–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    def __init__(self, bot):
        self.bot = bot
        
    @commands.command(name="settings", aliases=["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "config"])
    @requires_permission()
    async def show_settings(self, ctx: commands.Context):
        """
        –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !settings
        """
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        guild_settings = await self.bot.db.get_guild_settings(ctx.guild.id)
        
        embed = discord.Embed(
            title="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞",
            description=ctx.guild.name,
            color=discord.Color.blue()
        )
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        embed.add_field(
            name="üîß –û—Å–Ω–æ–≤–Ω—ã–µ",
            value=f"**–ü—Ä–µ—Ñ–∏–∫—Å:** `{self.bot.config.prefix}`\n"
                  f"**–Ø–∑—ã–∫:** `{guild_settings.get('language', self.bot.config.default_language)}`",
            inline=True
        )
        
        # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        access_info = []
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º
        required_nick = guild_settings.get('required_nickname')
        if required_nick:
            access_info.append(f"**–ù–∏–∫–Ω–µ–π–º:** —Å–æ–¥–µ—Ä–∂–∏—Ç `{required_nick}`")
        
        # –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ä–æ–ª–∏
        allowed_roles = guild_settings.get('allowed_roles', [])
        if allowed_roles:
            role_mentions = []
            for role_id in allowed_roles[:5]:  # –ú–∞–∫—Å–∏–º—É–º 5
                role = ctx.guild.get_role(role_id)
                if role:
                    role_mentions.append(role.mention)
            if role_mentions:
                access_info.append(f"**–†–æ–ª–∏:** {', '.join(role_mentions)}")
                if len(allowed_roles) > 5:
                    access_info.append(f"*...–∏ –µ—â—ë {len(allowed_roles) - 5}*")
                    
        if access_info:
            embed.add_field(
                name="üîê –î–æ—Å—Ç—É–ø",
                value="\n".join(access_info),
                inline=True
            )
        else:
            embed.add_field(
                name="üîê –î–æ—Å—Ç—É–ø",
                value="*–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã*",
                inline=True
            )
            
        # –§–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤
        formats = self.bot.config.number_formats
        format_examples = {
            "^\\d+\\.\\s*": "01. –ò–º—è",
            "^\\d+\\s*\\|\\|\\s*": "01 || –ò–º—è",
            "^\\d+\\s*": "01 –ò–º—è",
            "^\\d+\\s*-\\s*": "01 - –ò–º—è",
            "^\\[\\d+\\]\\s*": "[01] –ò–º—è"
        }
        
        format_list = []
        for pattern in formats[:3]:
            example = format_examples.get(pattern, pattern)
            format_list.append(f"‚Ä¢ `{example}`")
        if len(formats) > 3:
            format_list.append(f"*...–∏ –µ—â—ë {len(formats) - 3}*")
            
        embed.add_field(
            name="üî¢ –§–æ—Ä–º–∞—Ç—ã –Ω–æ–º–µ—Ä–æ–≤",
            value="\n".join(format_list) if format_list else "*–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ*",
            inline=False
        )
        
        # –§—É–Ω–∫—Ü–∏–∏
        features = self.bot.config.features
        feature_names = {
            "auto_save_hosts": "üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–¥—É—â–∏—Ö",
            "multi_language": "üåê –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å",
            "slash_commands": "‚ö° Slash-–∫–æ–º–∞–Ω–¥—ã",
            "web_dashboard": "üåê –í–µ–±-–ø–∞–Ω–µ–ª—å"
        }
        
        enabled_features = []
        disabled_features = []
        
        for feature, enabled in features.items():
            feature_name = feature_names.get(feature, feature)
            if enabled:
                enabled_features.append(f"‚úÖ {feature_name}")
            else:
                disabled_features.append(f"‚ùå {feature_name}")
                
        features_text = "\n".join(enabled_features + disabled_features)
        embed.add_field(
            name="üéõÔ∏è –§—É–Ω–∫—Ü–∏–∏",
            value=features_text if features_text else "*–ë–∞–∑–æ–≤—ã–µ*",
            inline=False
        )
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
        if self.bot.permission_system.is_admin(ctx.author):
            global_admins = self.bot.config.global_admins
            if global_admins:
                admin_mentions = []
                for admin_id in global_admins[:3]:
                    try:
                        user = self.bot.get_user(admin_id)
                        if not user:
                            user = await self.bot.fetch_user(admin_id)
                        admin_mentions.append(user.mention if user else f"ID:{admin_id}")
                    except:
                        admin_mentions.append(f"ID:{admin_id}")
                        
                admin_text = ", ".join(admin_mentions)
                if len(global_admins) > 3:
                    admin_text += f" *...–∏ –µ—â—ë {len(global_admins) - 3}*"
                    
                embed.add_field(
                    name="üëë –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã",
                    value=admin_text,
                    inline=False
                )
                
        await ctx.send(embed=embed)
        
    @commands.command(name="export", aliases=["—ç–∫—Å–ø–æ—Ä—Ç", "backup"])
    @requires_permission()
    async def export_settings(self, ctx: commands.Context):
        """
        –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !export
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        settings = await self.bot.db.get_guild_settings(ctx.guild.id)
        authorized_users = await self.bot.db.get_authorized_users(ctx.guild.id)
        hosts = await self.bot.db.get_active_hosts(ctx.guild.id)
        
        export_data = {
            "guild_id": ctx.guild.id,
            "guild_name": ctx.guild.name,
            "export_date": discord.utils.utcnow().isoformat(),
            "settings": settings,
            "authorized_users": authorized_users,
            "hosts": hosts
        }
        
        # –°–æ–∑–¥–∞—ë–º JSON
        json_data = json.dumps(export_data, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª
        file = discord.File(
            fp=json_data.encode('utf-8'),
            filename=f"settings_{ctx.guild.id}_{discord.utils.utcnow().strftime('%Y%m%d_%H%M%S')}.json"
        )
        
        embed = discord.Embed(
            title="üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ JSON —Ñ–∞–π–ª.",
            color=discord.Color.green()
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        await self.bot.db.log_action(
            ctx.guild.id,
            ctx.author.id,
            "export_settings",
            "–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞"
        )
        
        await ctx.send(embed=embed, file=file)
        
    @commands.command(name="info", aliases=["–∏–Ω—Ñ–æ", "about"])
    async def bot_info(self, ctx: commands.Context):
        """
        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !info
        """
        embed = discord.Embed(
            title="‚ÑπÔ∏è Discord Numeric Bot",
            description="–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –±–æ—Ç –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö",
            color=discord.Color.blue()
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_users = sum(guild.member_count for guild in self.bot.guilds)
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            value=f"**–°–µ—Ä–≤–µ—Ä–æ–≤:** {len(self.bot.guilds)}\n"
                  f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users:,}\n"
                  f"**–ö–æ–º–∞–Ω–¥:** {len(self.bot.commands)}",
            inline=True
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        import platform
        embed.add_field(
            name="üíª –°–∏—Å—Ç–µ–º–∞",
            value=f"**Python:** {platform.python_version()}\n"
                  f"**discord.py:** {discord.__version__}\n"
                  f"**–û–°:** {platform.system()}",
            inline=True
        )
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        if hasattr(self.bot, 'start_time'):
            uptime = discord.utils.utcnow() - self.bot.start_time
            hours, remainder = divmod(int(uptime.total_seconds()), 3600)
            minutes, seconds = divmod(remainder, 60)
            days, hours = divmod(hours, 24)
            
            uptime_str = ""
            if days:
                uptime_str += f"{days}–¥ "
            if hours:
                uptime_str += f"{hours}—á "
            if minutes:
                uptime_str += f"{minutes}–º "
            uptime_str += f"{seconds}—Å"
            
            embed.add_field(
                name="‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã",
                value=uptime_str,
                inline=True
            )
            
        # –°—Å—ã–ª–∫–∏
        embed.add_field(
            name="üîó –°—Å—ã–ª–∫–∏",
            value="[GitHub](https://github.com/yourusername/DiscordNumericBot) | "
                  "[–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å](https://discord.com/api/oauth2/authorize?client_id=YOUR_BOT_ID&permissions=268435456&scope=bot%20applications.commands) | "
                  "[–ü–æ–¥–¥–µ—Ä–∂–∫–∞](https://discord.gg/YOUR_SUPPORT_SERVER)",
            inline=False
        )
        
        embed.set_footer(
            text=f"–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å ‚ù§Ô∏è ‚Ä¢ v2.0",
            icon_url=self.bot.user.avatar.url if self.bot.user.avatar else None
        )
        
        await ctx.send(embed=embed)
        
    @commands.command(name="ping", aliases=["–ø–∏–Ω–≥"])
    async def ping(self, ctx: commands.Context):
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞
        
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: !ping
        """
        # –ò–∑–º–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
        import time
        start = time.perf_counter()
        message = await ctx.send("üèì –ò–∑–º–µ—Ä—è—é –∑–∞–¥–µ—Ä–∂–∫—É...")
        end = time.perf_counter()
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ API
        api_latency = round(self.bot.latency * 1000)
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_latency = round((end - start) * 1000)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ –∑–∞–¥–µ—Ä–∂–∫–µ
        if api_latency < 100:
            color = discord.Color.green()
            status = "üü¢ –û—Ç–ª–∏—á–Ω–æ"
        elif api_latency < 200:
            color = discord.Color.yellow()
            status = "üü° –•–æ—Ä–æ—à–æ"
        else:
            color = discord.Color.red()
            status = "üî¥ –ü–ª–æ—Ö–æ"
            
        embed = discord.Embed(
            title="üèì –ü–æ–Ω–≥!",
            color=color
        )
        
        embed.add_field(
            name="üì° WebSocket",
            value=f"{api_latency}–º—Å",
            inline=True
        )
        
        embed.add_field(
            name="üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ",
            value=f"{message_latency}–º—Å",
            inline=True
        )
        
        embed.add_field(
            name="üìä –°—Ç–∞—Ç—É—Å",
            value=status,
            inline=True
        )
        
        await message.edit(content=None, embed=embed)


async def setup(bot):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è –∫ –±–æ—Ç—É"""
    await bot.add_cog(SettingsCog(bot)) 