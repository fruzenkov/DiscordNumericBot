# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import logging.handlers
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Optional

# –¶–≤–µ—Ç–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
try:
    import colorlog
    COLORLOG_AVAILABLE = True
except ImportError:
    COLORLOG_AVAILABLE = False


def setup_logger(name: str = None, 
                log_dir: Path = None, 
                log_level: str = "INFO",
                max_bytes: int = 10 * 1024 * 1024,  # 10MB
                backup_count: int = 30) -> logging.Logger:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π —Ñ–∞–π–ª–æ–≤ –∏ —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
        log_level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        max_bytes: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∞
        backup_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)
    
    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    if logger.handlers:
        return logger
        
    logger.setLevel(getattr(logging, log_level.upper()))
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    file_format = '%(asctime)s | %(name)-20s | %(levelname)-8s | %(funcName)-20s | %(message)s'
    console_format = '%(asctime)s | %(name)-20s | %(levelname)-8s | %(message)s'
    date_format = '%Y-%m-%d %H:%M:%S'
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–∞–π–ª–∞
    if log_dir:
        log_dir = Path(log_dir)
        log_dir.mkdir(parents=True, exist_ok=True)
        
        # –ò–º—è —Ñ–∞–π–ª–∞ —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
        log_file = log_dir / f"bot_{datetime.now().strftime('%Y-%m-%d')}.log"
        
        # –†–æ—Ç–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
        file_handler = logging.handlers.RotatingFileHandler(
            log_file,
            maxBytes=max_bytes,
            backupCount=backup_count,
            encoding='utf-8'
        )
        file_handler.setLevel(logging.DEBUG)
        file_formatter = logging.Formatter(file_format, datefmt=date_format)
        file_handler.setFormatter(file_formatter)
        logger.addHandler(file_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(getattr(logging, log_level.upper()))
    
    if COLORLOG_AVAILABLE:
        # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
        console_formatter = colorlog.ColoredFormatter(
            f'%(log_color)s{console_format}',
            datefmt=date_format,
            log_colors={
                'DEBUG': 'cyan',
                'INFO': 'green',
                'WARNING': 'yellow',
                'ERROR': 'red',
                'CRITICAL': 'red,bg_white',
            }
        )
    else:
        console_formatter = logging.Formatter(console_format, datefmt=date_format)
        
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—É –ª–æ–≥–æ–≤ –≤–≤–µ—Ä—Ö –ø–æ –∏–µ—Ä–∞—Ä—Ö–∏–∏
    logger.propagate = False
    
    return logger


def get_logger(name: str) -> logging.Logger:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–≥–µ—Ä
    
    Args:
        name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞
        
    Returns:
        –õ–æ–≥–≥–µ—Ä
    """
    return logging.getLogger(name)


class DiscordLogHandler(logging.Handler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ª–æ–≥–æ–≤ –≤ Discord –∫–∞–Ω–∞–ª"""
    
    def __init__(self, bot, channel_id: int, min_level: int = logging.ERROR):
        super().__init__()
        self.bot = bot
        self.channel_id = channel_id
        self.setLevel(min_level)
        
    def emit(self, record):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –≤ Discord"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            log_entry = self.format(record)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —É—Ä–æ–≤–Ω—é
            emoji = {
                logging.WARNING: "‚ö†Ô∏è",
                logging.ERROR: "‚ùå",
                logging.CRITICAL: "üö®"
            }.get(record.levelno, "üìù")
            
            # –°–æ–∑–¥–∞—ë–º embed
            embed = {
                "title": f"{emoji} {record.levelname}",
                "description": f"```{log_entry[:1900]}```",
                "color": {
                    logging.WARNING: 0xFFA500,  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
                    logging.ERROR: 0xFF0000,    # –ö—Ä–∞—Å–Ω—ã–π
                    logging.CRITICAL: 0x8B0000  # –¢—ë–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
                }.get(record.levelno, 0x808080),
                "timestamp": datetime.utcnow().isoformat(),
                "fields": [
                    {"name": "Logger", "value": record.name, "inline": True},
                    {"name": "Function", "value": record.funcName, "inline": True},
                    {"name": "Line", "value": str(record.lineno), "inline": True}
                ]
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            self.bot.loop.create_task(self._send_to_discord(embed))
            
        except Exception:
            self.handleError(record)
            
    async def _send_to_discord(self, embed_data):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Discord"""
        try:
            channel = self.bot.get_channel(self.channel_id)
            if channel:
                embed = self.bot.discord.Embed.from_dict(embed_data)
                await channel.send(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∞ –≤ Discord: {e}")


def clean_old_logs(log_dir: Path, days_to_keep: int = 30):
    """
    –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    
    Args:
        log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏
        days_to_keep: –°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–≥–∏
    """
    if not log_dir.exists():
        return
        
    cutoff_date = datetime.now().timestamp() - (days_to_keep * 24 * 60 * 60)
    
    for log_file in log_dir.glob("*.log*"):
        if log_file.stat().st_mtime < cutoff_date:
            try:
                log_file.unlink()
                logging.info(f"–£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {log_file}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∞ {log_file}: {e}") 